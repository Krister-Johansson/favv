<!DOCTYPE html>
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        link(rel='stylesheet' type='text/css' href='/css/style.css')
        title OwO nuzzles you!
    body
        #message
            #user SweLogan
            #text Hello
        script(src='/socket.io/socket.io.js')
        script.
            var events = []
            const socketToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbiI6IjdGNzg3QjM4RjJCNDk2MjczRjA5IiwicmVhZF9vbmx5Ijp0cnVlLCJwcmV2ZW50X21hc3RlciI6dHJ1ZSwidHdpdGNoX2lkIjoiNzg5MTY0NDkiLCJmYWNlYm9va19pZCI6IjEwMTU5MDEyMzMyMDc5NDYwIn0.5qimbA8zs9xl7x0j2IDOEXit9mR4PKwogGfFnpHMdtc'
            var socket = io('//77719802.ngrok.io');

            var next = () =>{
                setTimeout(()=>{
                    if(events.length === 0){
                        next()
                    }else{
                        play(events[0])
                        events.shift();
                    }
                }, 1000)
            }

            var play = (data) => {
                var url = ''
                switch(data.type) {
                    case 'tts':
                        url = `/tts?text=${data.text}`
                    break;
                    case 'audio':
                        url = `/audio/${data.nr}.mp3`
                    break;
                    case 'follow':
                        url = `/follow?name=${data.name}`
                    break;
                    default:
                    // code block
                }

                var audio = new Audio(url);  
                audio.type = 'audio/mpeg';
                audio.addEventListener('canplaythrough', ()=>{
                    audio.play()
                    if(data.type == 'follow'){
                        var xhttp = new XMLHttpRequest();
                        //- xhttp.open("GET", "/zap", true);
                        
                        xhttp.open("GET", "/vibrate", true);
                        xhttp.send();
                    }
                }, false);
                audio.addEventListener('ended', (event) => {
                    next()
                });
            }
            
            socket.on('play', (data) => {
                events.push(data)
                console.log(data)
            });
            next()

            const streamlabs = io(`https://sockets.streamlabs.com?token=${socketToken}`, {transports: ['websocket']});
  
            //Perform Action on event
            streamlabs.on('event', (eventData) => {
                console.log(eventData)
                if (eventData.type === 'donation') {
                    eventData.message.forEach(x=>{
                        var xhttp = new XMLHttpRequest();
                        
                        if(x.amount >= 10){
                            xhttp.open("GET", "/zap", true);
                        }else{
                            xhttp.open("GET", "/vibrate", true);
                        }
                        
                        xhttp.send();
                    })
                }
                if (eventData.for === 'twitch_account') {
                    switch(eventData.type) {
                        case 'follow':
                        console.log('follow')
                            eventData.message.forEach(x=>{
                                console.log({
                                    name: x.name,
                                    type: 'follow',
                                })
                                events.push({
                                    name: x.name,
                                    type: 'follow',
                                })
                            })
                        break;
                        case 'subscription':
                            //code to handle subscription events
                            console.log(eventData.message);
                        break;
                        default:
                            //default case
                            console.log(eventData.message);
                    }
                }
            });
